@model FlightJobs.Models.JobSerachModel
@using FlightJobs.Util;

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.5.1/dist/leaflet.css"
      integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
      crossorigin="" />
<script src="https://unpkg.com/leaflet@1.5.1/dist/leaflet.js"
        integrity="sha512-GffPMF3RvMeYyc1LWMHtK8EbPv0iNZ8/oTtHPx9/cc2ILxQ+u905qIwdpULaqDkyBKgOaB57QTMg7ztg8Jm2Og=="
        crossorigin=""></script>

<style>
    .uppercase {
        text-transform: uppercase;
    }
    .swap {
        cursor: pointer;
        color: #5bc0de;
    }
    .popover {
        max-width: 100%; /* Max Width of the popover (depending on the container!) */
    }
    .map-container {
        width: 95%;
        margin: 20px;
        border: 1px solid #D1D3D4;
    }
    #mapid {
        height: 290px;
    }
    #searchclear {
        position: absolute;
        right: 5px;
        top: 25px;
        bottom: 0;
        height: 14px;
        margin: auto;
        font-size: 14px;
        cursor: pointer;
        color: #ccc;
    }
</style>
@using (Html.BeginForm("Index", "SearchJobs", FormMethod.Post, new { id = "searchForm" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal" role="form">
        <br />
        <h4>Choose the parameters for generate jobs</h4>
        
        <div class="my-form-content">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div id="swap-button" class="swap">Swap departure and destination</div>
            
            <div class="form-group">
                <div class="row">
                    <div class="col-md-2" style="padding-right:0px; width:12%;">
                        @Html.LabelFor(model => model.Departure, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Departure, new { htmlAttributes = new { placeholder = "ICAO", @class = "form-control uppercase", @maxlength = "4" } })
                        <span id="searchclear" onclick="clearInput('Departure')" class="glyphicon glyphicon-remove-circle"></span>
                        @Html.ValidationMessageFor(model => model.Departure, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm-1" style="padding-left:0px; padding-right:0px; width:auto;">
                        <br />
                        <img src="~/Content/img/airplane.png" />

                    </div>

                    <div class="col-md-2" style="padding: 0px; width: 12%;">
                        @Html.LabelFor(model => model.Arrival, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Arrival, new { htmlAttributes = new { placeholder = "ICAO", @class = "form-control uppercase", @maxlength = "4" } })
                        <span id="searchclear" onclick="clearInput('Arrival')" class="glyphicon glyphicon-remove-circle"></span>
                        @Html.ValidationMessageFor(model => model.Arrival, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-xs-1" style="padding:5px; width:auto;">
                        <input id="arrival-tips-button" type="button" value="Tips" class="btn btn-info btn-xs" style="margin-top:26px;" />
                        <input id="random-button" type="button" value="Random" class="btn btn-info btn-xs" style="margin:26px 0px 0px 10px;" />
                        <img id="random-loading-img" src="~/Content/img/loading.gif" style="width:20px; display:none;" />
                    </div>
                    <div id="departure-required" style="display: none;"><i class="glyphicon glyphicon-alert"></i>  First set a valid departure.</div>
                    <div id="arrival-tips-table" style="display: none;" class="col-md-6">Loading...</div>
                </div>
                <div class="row">
                    <div class="col-md-4 text-center" style="padding-left:0px">
                        <label id="Distance" style="font-size:small;"></label>
                    </div>
                </div>


                <div class="row">
                    <div class="col-md-2" style="width: 10%; padding: 0px; margin-left: 15px;">
                        @Html.LabelFor(model => model.Alternative, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Alternative, new { htmlAttributes = new { placeholder = "ICAO", @class = "form-control uppercase", @maxlength = "4" } })
                        <span id="searchclear" onclick="clearInput('Alternative')" class="glyphicon glyphicon-remove-circle"></span>
                        @Html.ValidationMessageFor(model => model.Alternative, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-xs-1" style="padding:0px; width:auto; margin: 5px;">
                        <input id="alternative-tips-button" type="button" value="Tips" class="btn btn-info btn-xs" style="margin-top:26px" />
                    </div>
                    <div id="destination-required" style="display: none;"><i class="glyphicon glyphicon-alert"></i> First set a valid destination.</div>
                    <div id="alternative-tips-table" style="display: none;" class="col-md-6">Loading...</div>
                    <input type="submit" value="Generate" class="btn btn-info pull-right" style="margin-right:20px;" />
                </div>

                <div id="mapContainer" class="map-container"></div>
            </div>
            <br />
        </div>
        <div class="form-group">
            <hr />
            
            <div class="funkyradio">
                <div class="row">
                    <div class="col-xs-3 ">
                        <div class="funkyradio-info">
                            <input type="radio" name="AviationType" id="GeneralAviation" value="GeneralAviation" />
                            <label for="GeneralAviation"><img src="~/Content/img/pictures/general-aviation.jpg" style="width:100px; height:70px;" /><span>General</span></label>
                        </div>
                    </div>
                    <div class="col-xs-3 ">
                        <div class="funkyradio-info">
                            <input type="radio" name="AviationType" id="AirTransport" value="AirTransport" checked="checked" />
                            <label for="AirTransport"><img src="~/Content/img/pictures/air-transport.jpg" style="width:100px; height:70px;" /><span>Air transport</span></label>
                        </div>
                    </div>
                    <div class="col-xs-3 ">
                        <div class="funkyradio-info">
                            <input type="radio" name="AviationType" id="HeavyAirTransport" value="HeavyAirTransport" />
                            <label for="HeavyAirTransport"><img src="~/Content/img/pictures/heavy.jpg" style="width:100px; height:70px;" /><span>Heavy</span></label>
                        </div>
                    </div>
                    <div class="col-xs-3 ">
                        <div class="funkyradio-info">
                            <input type="radio" name="AviationType" id="Cargo" value="Cargo" />
                            <label for="Cargo"><img src="~/Content/img/pictures/cargo.jpg" style="width:100px; height:70px;" /><span>Cargo</span></label>
                        </div>
                    </div>
                    
                </div>
                <hr />
                <div class="row">
                    <div align="center" style="margin-left: 15px;">
                        <div class="funkyradio-info" style="width:250px;">
                            <div class="row">
                                <div class="col-lg-8">
                                    @Html.CheckBoxFor(model => model.UseCustomPlaneCapacity)
                                    <label for="UseCustomPlaneCapacity" style="text-align:center;">
                                        <img src="~/Content/img/capacity001.jpg" style="width:120px; height:80px; " />
                                        <span>Custom capacity</span>
                                    </label>
                                </div>
                                <div class="col-lg-2" style="margin-top:30px; padding-left:0px;">
                                    <input id="ChangeCapacity" type="button" value="Change" class="btn btn-info" @{ if (!Model.UseCustomPlaneCapacity) { <text> disabled </text> }} />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="width: 620px;">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">Custom capacity</h4>
                </div>

                <div class="modal-body">
                    <h5 style="color:gray">* This information will be used to calculate the Job Profit.</h5>
                    <div class="form-group">
                        @if (Model.CustomPlaneCapacityList == null)
                        {
                            Model.CustomPlaneCapacityList = new List<SelectListItem>();                            
                        }
                        @if (Model.CustomPlaneCapacity == null)
                        {
                            Model.CustomPlaneCapacity = new FlightJobs.Models.CustomPlaneCapacityDbModel()
                            {
                                CustomCargoCapacityWeight = 1500, CustomNameCapacity = "B738", CustomPassengerCapacity = 5
                            };
                        }
                        <hr />
                        <div class="row">
                            @Html.Partial("CapacityListView", Model)
                        </div>
                        <br />
                        <div class="row">
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col-md-12">
                                        <label class="control-label" for="CustomPassengerCapacity">Passenger capacity</label>
                                        @Html.EditorFor(model => model.CustomPlaneCapacity.CustomPassengerCapacity, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                </div>
                                <br />
                                <div class="row">
                                    <div class="col-md-12">
                                        <label class="control-label" for="CustomCargoCapacityWeight">
                                            Cargo capacity weight @if (DataConversion.GetWeightUnit(Request) == DataConversion.UnitPounds)
                                            { <span> (lbs)</span>;
                                            }
                                            else
                                            { <span> (Kg)</span>;
                                            }
                                        </label>
                                        @Html.EditorFor(model => model.CustomPlaneCapacity.CustomCargoCapacityWeight, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                </div>
                                <br />
                                <div class="row">
                                    <div class="col-md-12">
                                        <label class="control-label" for="CustomNameCapacity">Capacity Name (Change to add)</label>
                                        @Html.EditorFor(model => model.CustomPlaneCapacity.CustomNameCapacity, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <img id="CustomPlaneCapacity_ImagePath" src="@Model.CustomPlaneCapacity.ImagePath" style="width: 280px;margin: 20px 0px 20px 0px;" />
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="col-md-3 pull-right">
                                            <button type="button" class="btn btn-info btn-xs" id="SaveCustomCapacity">Add</button>
                                        </div>
                                        <div class="col-md-3 pull-right">
                                            <button type="button" class="btn btn-default btn-xs" id="RemoveCustomCapacity">Remove</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button id="SelectCustomCapacity" type="button" class="btn btn-info" data-dismiss="modal">Select</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="myModalConfirm" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="width: 750px;">
                @using (Html.BeginForm("SearchProfile", "Profile", FormMethod.Post))
                {
                    <div class="modal-header" style="padding:5px;">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title" id="myModalLabel">Confirm addition of jobs</h4>
                    </div>

                    <div id="confirm-content"></div>
                }
            </div>
        </div>
    </div>
}



<script>
    $('[data-toggle="popover"]').popover({
        container: 'body'
    });
    $("#ChangeCapacity").click(function () {
        $('#myModal').modal('show');
        $('#UseCustomPlaneCapacity').prop("checked", 1)
    });

    $('#searchForm').submit(function () {
        $.ajax({
            url: '@Url.Action("Index", "SearchJobs")',
            type: "Post",
            data: $("#searchForm").serialize(),
            success: function (result) {
                if (result != null) {
                    $("#confirm-content").html(result);

                    $('#myModalConfirm').modal('show');
                }
            }
        });
            return false;
    });

    $('#UseCustomPlaneCapacity').change(function () {
        var ck = $('#UseCustomPlaneCapacity').prop("checked");
        $("#ChangeCapacity").prop('disabled', !ck);

        $.ajax({
            url: '@Url.Action("SetCustonCapacity", "SearchJobs")',
            type: "Get",
            data: { isChecked: ck },
            success: function (result) {}
        });
    });

    $('#CustomPassengerCapacity').change(function () {
        var passengersVal = $('#CustomPassengerCapacity').val();
        if (parseInt(passengersVal) > 600) {
            $('#CustomPassengerCapacity').val(600);
        }
    });

    $('#CustomCargoCapacityWeight').change(function () {
        var cargoVal = $('#CustomCargoCapacityWeight').val();
        if (parseInt(cargoVal) > 190000) {
            $('#CustomCargoCapacityWeight').val(190000);
        }
    });


    $('#SaveCustomCapacity').click(function () {
        var passengersVal = $('#CustomPlaneCapacity_CustomPassengerCapacity').val();
        var cargoVal = $('#CustomPlaneCapacity_CustomCargoCapacityWeight').val();
        var nameVal = $('#CustomPlaneCapacity_CustomNameCapacity').val();

        $.ajax({
            url: '@Url.Action("AddCustonCapacity", "SearchJobs")',
            type: "Get",
            data: { passengers: passengersVal, cargo: cargoVal, name: nameVal },
            success: function (result) {
                $('#CapacityListContent').html(result);
            }
        });
    });

    $('#RemoveCustomCapacity').click(function () {
        var customPlaneCapacityId = $('#CustomPlaneCapacity_Id').val();

        $.ajax({
            url: '@Url.Action("RemoveCustomCapacity", "SearchJobs")',
            type: "Get",
            data: { capacityId: customPlaneCapacityId },
            success: function (result) {
                $('#CapacityListContent').html(result);
                $('#CustomPlaneCapacity_CustomPassengerCapacity').val('');
                $('#CustomPlaneCapacity_CustomCargoCapacityWeight').val('');
                $('#CustomPlaneCapacity_CustomNameCapacity').val('');
            }
        });
    });

    $('#SelectCustomCapacity').click(function () {
        var customPlaneCapacityId = $('#CustomPlaneCapacity_Id').val();

        $.ajax({
            url: '@Url.Action("SelectCustomCapacity", "SearchJobs")',
            type: "Get",
            data: { capacityId: customPlaneCapacityId },
            success: function (result) {
                $('#CapacityListContent').html(result);
            }
        });
    });

    $('#swap-button').click(function () {
        var dep = $('#Departure').val();
        var arr = $('#Arrival').val();
        $('#Departure').val(arr);
        $('#Arrival').val(dep);
        LoadMapInfo();
    });


    $('#random-button').click(function () {
        //random-loading-img
        $('#random-loading-img').show();
        $.ajax({
            url: '@Url.Action("RandomFlight", "SearchJobs")',
            type: "Get",
            data: { destination: $('#Arrival').val(), departure: $('#Departure').val() },
            success: function (result) {
                if (result != null && result != '') {
                    $('#Arrival').val(result.ArrivalICAO);
                    $('#Departure').val(result.DepartureICAO);
                    $('#Alternative').val(result.AlternativeICAO);
                    CalcDistance();
                    LoadMapInfo();
                    $('#random-loading-img').hide();
                }
                else {
                    $('#random-loading-img').hide();
                }
            }
        });
        return false;
    });

    $('#alternative-tips-button').click(function () {
        $("#arrival-tips-table").hide();
        $("#alternative-tips-table").toggle(500);
        $.ajax({
            url: '@Url.Action("AlternativeTips", "SearchJobs")',
            type: "Get",
            data: { destination: $('#Arrival').val(), range: 60 },
            success: function (result) {
                if (result != null && result != '') {
                    $("#destination-required").hide();
                    $("#alternative-tips-table").html(result);
                }
                else {
                    $("#destination-required").show().delay(3000).fadeOut();
                    $("#alternative-tips-table").hide();
                    $("#Arrival").focus();
                }
            }
        });
        return false;

    });

    $('#arrival-tips-button').click(function () {
        $("#alternative-tips-table").hide();
        $("#arrival-tips-table").toggle(500);
        $.ajax({
            url: '@Url.Action("ArrivalTips", "SearchJobs")',
            type: "Get",
            data: { departure: $('#Departure').val() },
            success: function (result) {
                if (result != null && result != '') {
                    $("#departure-required").hide();
                    $("#arrival-tips-table").html(result);
                }
                else {
                    $("#departure-required").show().delay(3000).fadeOut();
                    $("#arrival-tips-table").hide();
                    $("#Departure").focus();
                }
            }
        });
        return false;

    });

    $('#Alternative').change(function () {
        if ($('#Alternative').val().length == 4) {
            LoadMapInfo();
        }
    });

    $('#Arrival').change(function () {
        if ($('#Departure').val().length == 4 && $('#Arrival').val().length == 4) {
            CalcDistance();
            LoadMapInfo();
        }
    });

    $('#Arrival').keyup(function () {

        if ($('#Departure').val().length == 4 && $('#Arrival').val().length == 4) {
            CalcDistance();
            LoadMapInfo();
        }
    });

    $('#Departure').keyup(function () {

        if ($('#Departure').val().length == 4 && $('#Arrival').val().length == 4) {
            CalcDistance();
            LoadMapInfo();
        }
    });

    function CalcDistance() {
        $.ajax({
            url: '@Url.Action("CalcDistance", "SearchJobs")',
            type: "Get",
            data: { departure: $('#Departure').val(), arrival: $('#Arrival').val() },
            success: function (result) {
                if (result != null && result != '') {
                    $('#Distance').html(result + ' NM');
                }
            }
        });
    }

    function LoadMapInfo() {
        if ($('#Departure').val().length == 4 && $('#Arrival').val().length == 4) {
            $.ajax({
                url: '@Url.Action("GetMapInfo", "SearchJobs")',
                type: "Get",
                data: { departure: $('#Departure').val(), arrival: $('#Arrival').val(), alternative: $('#Alternative').val() },
                success: function (result) {
                    if (result != null && result != '') {
                        ShowMap(result);
                    }
                }
            });
        }
    }

    function ShowMap(markers) {
        document.getElementById('mapContainer').innerHTML = "<div id='mapid'></div>";
        var mymap = L.map('mapid');
        var bounds = new L.latLngBounds();
        var flight_path = [];

        L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}',
            {
                attribution: 'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ',
                maxZoom: 18,
            }
        ).addTo(mymap);

        markers.forEach(function (marker) {
            var marker_icon = L.icon({
                iconUrl: marker.icon_url,
                iconAnchor: [marker.icon_center_x, marker.icon_center_y],
            });

            var m = L.marker([marker.lat, marker.lng], { icon: marker_icon }).addTo(mymap);
            m.bindPopup('<strong>' + marker.name + '</strong><br/>' +
                marker.info + ' <br/> Runway size: ' +
                marker.runway_size + '<br/>Elevation: ' +
                marker.elevation + '<br/>Trasition: ' +
                marker.trasition);

            if (marker.isRoute) {
                flight_path.push([marker.lat, marker.lng]);

                bounds.extend([marker.lat, marker.lng]);
            }
        });

        L.polyline(flight_path, { color: '#5bc0de' }).addTo(mymap);

        mymap.fitBounds(bounds, { padding: [25, 25] });

    }

    function clearInput(inputId) {
        $("#" + inputId).val('');
    }


</script>